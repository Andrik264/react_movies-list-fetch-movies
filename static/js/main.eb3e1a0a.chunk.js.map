{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","className","src","alt","MoviesList","movies","map","movie","key","imdbID","FindMovie","onAddMovie","useState","movieTitle","setMovieTitle","foundedMovie","setFoundedMovie","isError","setIsError","isLoading","setIsLoading","useEffect","searchMovie","a","fetch","then","response","json","result","Error","catch","error","finally","htmlFor","type","id","placeholder","classnames","value","onChange","event","target","data-cy","onClick","disabled","App","data","addMovie","newMovie","includes","ReactDOM","render","document","getElementById"],"mappings":"gvEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,YAFuB,MAEhB,GAFgB,EAGvBC,EAHuB,EAGvBA,OAHuB,OAKvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKF,EACLG,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcH,KAI/B,yBAAKG,UAAU,WACZF,EACD,kCC9BKK,EAAa,SAAC,GAAD,QAAGC,cAAH,MAAY,GAAZ,SACxB,yBAAKJ,UAAU,UACZI,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,uCCA3BG,G,MAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACRH,GAAW,KACV,CAACL,IAEJ,IAAMS,EAAW,uCAAG,sBAAAC,EAAA,sDAClBH,GAAa,GACbF,GAAW,GAEXM,MAAM,GAAD,OAhBA,2CAgBA,cAAaX,IACfY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACDA,EAAOC,MACTX,GAAW,GAEXF,EAAgBY,MAGnBE,OAAM,SAACC,GAEN,MADAb,GAAW,GACL,IAAIW,MAAME,MAEjBC,SAAQ,kBAAMZ,GAAa,MAjBZ,2CAAH,qDAyBjB,OACE,oCACE,0BAAMnB,UAAU,cACd,yBAAKA,UAAU,SACb,2BAAOA,UAAU,QAAQgC,QAAQ,eAAjC,eAIA,yBAAKhC,UAAU,WACb,2BACEiC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZnC,UAAWoC,IAAW,QACpB,CAAE,YAAapB,IACjBqB,MAAOzB,EACP0B,SAAU,SAAAC,GAAK,OAAI1B,EAAc0B,EAAMC,OAAOH,WAIjDrB,GACC,uBAAGhB,UAAU,kBAAb,wCAKDkB,GACC,uBAAGlB,UAAU,QAAb,iBAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEiC,KAAK,SACLjC,UAAU,kBACVyC,UAAQ,OACRC,QAASrB,GAJX,iBAUF,yBAAKrB,UAAU,WACb,4BACEiC,KAAK,SACLjC,UAAU,oBACVyC,UAAQ,MACRE,UAAW7B,EACX4B,QAxDW,WACrBhC,EAAWI,GACXD,EAAc,MAiDN,sBAaLC,GACC,yBAAKd,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcc,O,OCnGZ8B,EAAM,WACjB,MAA2BjC,mBAASkC,GAApC,mBAAOzC,EAAP,KAAe0C,EAAf,KAYA,OACE,yBAAK9C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYI,OAAQA,KAEtB,yBAAKJ,UAAU,WACb,kBAAC,EAAD,CAAWU,WAhBE,SAACqC,GACA3C,EAAOC,KACvB,qBAAGG,UAGUwC,SAASD,EAASvC,SAC/BsC,EAAS,CAACC,GAAF,mBAAe3C,WCV7B6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.eb3e1a0a.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot = '',\n  Poster,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies = [] }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\nconst URL = `https://www.omdbapi.com/?apikey=7272b996`;\n\nexport const FindMovie = ({ onAddMovie }) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [foundedMovie, setFoundedMovie] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsError(false);\n  }, [movieTitle]);\n\n  const searchMovie = async() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    fetch(`${URL}&t=${movieTitle}`)\n      .then(response => response.json())\n      .then((result) => {\n        if (result.Error) {\n          setIsError(true);\n        } else {\n          setFoundedMovie(result);\n        }\n      })\n      .catch((error) => {\n        setIsError(true);\n        throw new Error(error);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleAddMovie = () => {\n    onAddMovie(foundedMovie);\n    setMovieTitle('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames('input',\n                { 'is-danger': isError })}\n              value={movieTitle}\n              onChange={event => setMovieTitle(event.target.value)}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {isLoading && (\n            <p className=\"help\">\n              Searching...\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              data-cy=\"find\"\n              onClick={searchMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              data-cy=\"add\"\n              disabled={!foundedMovie}\n              onClick={handleAddMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {foundedMovie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...foundedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  onAddMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, addMovie] = useState(data);\n\n  const onAddMovie = (newMovie) => {\n    const moviesIds = movies.map(\n      ({ imdbID }) => imdbID,\n    );\n\n    if (!moviesIds.includes(newMovie.imdbID)) {\n      addMovie([newMovie, ...movies]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={onAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}